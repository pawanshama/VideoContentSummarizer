// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  projects       Project[]       @relation("UserProjects")
  collaborations Collaboration[]
  comments       Comment[]
  feedbacks      Feedback[]
  createdAt      DateTime        @default(now())
}

model Project {
  id             String          @id @default(uuid())
  title          String
  description    String?
  ownerId        String
  owner          User            @relation("UserProjects", fields: [ownerId], references: [id])
  videos         Video[]
  collaborations Collaboration[]
  createdAt      DateTime        @default(now())
}

model Video {
  id          String     @id @default(uuid())
  title       String
  url         String
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  summary     Summary?
  transcript  Transcript?
  comments    Comment[]
  feedbacks   Feedback[]
  createdAt   DateTime   @default(now())
}

model Summary {
  id        String   @id @default(uuid())
  content   String
  videoId   String   @unique
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
}

model Transcript {
  id        String   @id @default(uuid())
  content   String
  videoId   String   @unique
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
}

model Feedback {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
}

model Collaboration {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      String   // e.g., 'viewer', 'editor'
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
